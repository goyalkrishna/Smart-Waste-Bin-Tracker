<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="/css/admin.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
    />
  </head>
  <body>
    <!-- Add User Modal -->
    <div id="addUserModal" class="modal-overlay" style="display: none">
      <div class="modal-content">
        <form id="addUserForm">
          <h2><i class="fas fa-user-plus"></i> Add New User</h2>
          <div id="modal-error-message" class="error-message hidden"></div>
          <div class="form-group">
            <label for="username">Username</label>
            <input type="text" id="username" name="username" required />
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required />
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required />
          </div>
          <div class="form-group">
            <label for="role">Role</label>
            <select id="role" name="role">
              <option value="staff">Staff</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          <hr />
          <p class="security-note">
            For security, please enter your own password to confirm.
          </p>
          <div class="form-group">
            <label for="adminPassword">Your Admin Password</label>
            <input
              type="password"
              id="adminPassword"
              name="adminPassword"
              required
            />
          </div>
          <div class="modal-actions">
            <button type="button" id="cancelAddUser" class="btn btn-secondary">
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">
              <span class="btn-text">Add User</span>
              <div class="spinner"></div>
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Edit User Modal -->
    <div id="editUserModal" class="modal-overlay" style="display: none">
      <div class="modal-content">
        <form id="editUserForm">
          <h2><i class="fas fa-user-edit"></i> Edit User Details</h2>
          <div id="edit-error-message" class="error-message hidden"></div>
          <input type="hidden" id="editUserId" name="userId" />
          <div class="form-group">
            <label for="editUsername">Username</label>
            <input type="text" id="editUsername" name="username" required />
          </div>
          <div class="form-group">
            <label for="editEmail">Email</label>
            <input type="email" id="editEmail" name="email" required />
          </div>
          <div class="form-group">
            <label for="editRole">Role</label>
            <select id="editRole" name="role">
              <option value="staff">Staff</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          <div class="modal-actions">
            <button type="button" id="cancelEditUser" class="btn btn-secondary">
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    </div>

    <div class="admin-layout">
      <!-- Sidebar -->
      <aside id="sidebar" class="sidebar">
        <div class="sidebar-header">
          <h2><i class="fas fa-leaf"></i> EcoVision</h2>
        </div>
        <ul class="sidebar-menu">
          <li class="nav-link active" data-target="dashboard">
            <i class="fas fa-tachometer-alt"></i><span>Dashboard</span>
          </li>
          <li class="nav-link" data-target="users">
            <i class="fas fa-users"></i><span>Users</span>
          </li>
          <li class="nav-link" data-target="bins">
            <i class="fas fa-dumpster"></i><span>Bins</span>
          </li>
          <li class="nav-link" data-target="alerts">
            <i class="fas fa-bell"></i><span>Alerts</span>
            <span class="notification-badge" id="alert-badge" style="display: none;"></span>
          </li>
          <li class="nav-link" data-target="damage-reports">
            <i class="fas fa-tools"></i><span>Damage Reports</span>
          </li>
          <li class="nav-link" data-target="supply-requests">
              <i class="fas fa-box"></i><span>Supply Requests</span>
          </li>
          <!-- <li class="nav-link" data-target="settings">
            <i class="fas fa-cog"></i><span>Settings</span>
          </li> -->
        </ul>
      </aside>

      <!-- Main Content Wrapper -->
      <div class="main-content-wrapper">
        <!-- Navbar -->
        <header class="navbar">
          <div class="nav-left">
            <h2 class="project-name"><span>EcoVision</span> Admin Panel</h2>
          </div>
          <div class="nav-right">
            <label class="theme-switch">
              <input type="checkbox" id="darkToggle" />
              <span class="slider round"></span>
            </label>
            <div class="admin-profile">
              <% if (user.avatar) { %>
              <img src="<%= user.avatar %>" alt="Admin" />
              <% } else { %>
              <div class="avatar-initial">
                <%= user.username.charAt(0).toUpperCase() %>
              </div>
              <% } %>
              <span id="user-name"
                ><%= user.username %> <i class="fas fa-chevron-down"></i
              ></span>
              <div class="dropdown-menu">
                <a href="/profile"
                  ><i class="fas fa-user-circle"></i> My Profile</a
                >
                <a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
              </div>
            </div>
          </div>
        </header>

        <!-- Main Content Area -->
        <main class="content-area">
          <!-- Dashboard Tab -->
          <div id="dashboard" class="content-tab active">
            <h1>Dashboard</h1>
            <div class="stats">
              <div class="stat-card">
                <div
                  class="card-icon"
                  style="background-color: #e0e7ff; color: #4338ca"
                >
                  <i class="fa-solid fa-users"></i>
                </div>
                <div class="card-info">
                  <h3>Total Users</h3>
                  <p id="totalUsersStat"><%= stats.users %></p>
                </div>
              </div>
              <div class="stat-card">
                <div
                  class="card-icon"
                  style="background-color: #dcfce7; color: #166534"
                >
                  <i class="fa-solid fa-trash"></i>
                </div>
                <div class="card-info">
                  <h3>Total Bins</h3>
                  <p id="totalBinsStat"><%= stats.bins %></p>
                </div>
              </div>
              <div class="stat-card">
                <div
                  class="card-icon"
                  style="background-color: #fef3c7; color: #92400e"
                >
                  <i class="fa-solid fa-dumpster-fire"></i>
                </div>
                <div class="card-info">
                  <h3>Full Bins</h3>
                  <p id="fullBinsStat"><%= stats.fullBins %></p>
                </div>
              </div>
              <div class="stat-card">
                <div
                  class="card-icon"
                  style="background-color: #fee2e2; color: #991b1b"
                >
                  <i class="fa-solid fa-bell"></i>
                </div>
                <div class="card-info">
                  <h3>Active Alerts</h3>
                  <p id="activeAlertsStat"><%= stats.alerts %></p>
                </div>
              </div>
            </div>
            <div class="charts">
              <div class="chart-card">
                <h3>Waste Collection Trends</h3>
                <canvas id="wasteChart"></canvas>
              </div>
              <div class="chart-card">
                <h3>Bin Status</h3>
                <canvas id="statusChart"></canvas>
              </div>
            </div>
          </div>

          <!-- Users Tab -->
          <div id="users" class="content-tab">
            <div class="page-header">
                <h1>Manage Users</h1>
                <div class="header-actions">
                    <div class="search-bar">
                        <i class="fas fa-search"></i>
                        <input type="text" id="userSearch" placeholder="Search users...">
                    </div>
                    <button class="btn btn-primary" id="addUserBtn">
                        <i class="fas fa-plus"></i> Add User
                    </button>
                </div>
            </div>
            <div class="table-container card">
              <table>
                <thead>
                  <tr>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="users-table-body">
                  <% users.forEach(u => { %>
                  <tr>
                    <td>
                      <div class="user-info-cell">
                        <% if (u.avatar) { %>
                        <img
                          src="<%= u.avatar %>"
                          alt="<%= u.username %>"
                          class="avatar"
                        />
                        <% } else { %>
                        <div class="avatar-initial">
                          <%= u.username.charAt(0).toUpperCase() %>
                        </div>
                        <% } %>
                        <span><%= u.username %></span>
                      </div>
                    </td>
                    <td><%= u.email %></td>
                    <td>
                      <span class="role-tag role-<%= u.role %>"
                        ><%= u.role %></span
                      >
                    </td>
                    <td class="actions">
                      <button
                        class="btn-action edit-user"
                        title="Edit User"
                        data-user-id="<%= u._id %>"
                      >
                        <i class="fas fa-pencil-alt"></i>
                      </button>
                      <button
                        class="btn-action delete-user"
                        title="Delete User"
                        data-user-id="<%= u._id %>"
                      >
                        <i class="fas fa-trash-alt"></i>
                      </button>
                    </td>
                  </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
          </div>

          <!-- Bins Tab -->
          <div id="bins" class="content-tab">
            <h1>Manage Bins</h1>
            <div class="table-container card">
              <table>
                <thead>
                  <tr>
                    <th>Bin ID</th>
                    <th>Location</th>
                    <th>Fill Level</th>
                    <th>Status</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="bins-table-body">
                  <% bins.forEach(bin => { %>
                    <tr class="<%= bin.status === 'Under Maintenance' ? 'maintenance-row' : '' %>">
                      <td><%= bin.binId %></td>
                      <td><%= bin.location %></td>
                      <td><%= bin.fillLevel %>%</td>
                      <td>
                          <% var statusText, statusClass;
                            if (bin.status === 'Under Maintenance') {
                                statusText = 'Maintenance'; statusClass = 'status-maintenance';
                            } else if (bin.fillLevel >= 80) {
                                statusText = 'High'; statusClass = 'status-high';
                            } else if (bin.fillLevel >= 30) {
                                statusText = 'Medium'; statusClass = 'status-medium';
                            } else {
                                statusText = 'Low'; statusClass = 'status-low';
                            } %>
                          <span class="status <%= statusClass %>"><%= statusText %></span>
                      </td>
                      <td class="actions">
                          <button class="btn-action mark-maintenance" title="Toggle Maintenance" data-bin-id="<%= bin._id %>">
                              <i class="fas fa-tools"></i>
                          </button>
                          <button class="btn-action delete-bin" title="Delete Bin" data-bin-id="<%= bin._id %>">
                              <i class="fas fa-trash-alt"></i>
                          </button>
                      </td>
                    </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
          </div>


          <!-- ✅ ALERTS TAB -->
          <div id="alerts" class="content-tab">
              <div class="page-header">
                  <h1>Manage Alerts</h1>
                  <div class="header-actions">
                      <!-- Filter controls yahan aayenge -->
                  </div>
              </div>
              <div class="table-container card">
                  <table>
                      <thead>
                          <tr>
                              <th>Type</th>
                              <th>Message</th>
                              <th>Bin ID</th>
                              <th>Status</th>
                              <th>Timestamp</th>
                              <th>Actions</th>
                          </tr>
                      </thead>
                      <tbody id="alerts-table-body">
                          <% alerts.forEach(alert => { %>
                              <tr id="alert-<%= alert._id %>" class="alert-row-<%= alert.status.toLowerCase() %>">
                                  <td><span class="status status-<%= alert.type.toLowerCase() %>"><%= alert.type %></span></td>
                                  <td><%= alert.message %></td>
                                  <td><%= alert.bin ? alert.bin.binId : 'N/A' %></td>
                                  <td><%= alert.status %></td>
                                  <td><%= new Date(alert.createdAt).toLocaleString() %></td>
                                  <!-- Inside the alerts table body -->
                                  <td class="actions">
                                    <!-- ✅ UPDATE these buttons -->
                                    <button class="btn-action resolve-alert" title="Mark as Resolved" data-alert-id="<%= alert._id %>">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn-action delete-alert" title="Delete" data-alert-id="<%= alert._id %>">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                  </td>
                              </tr>
                          <% }) %>
                      </tbody>
                  </table>
              </div>
          </div>


          <!-- ✅ DAMAGE REPORTS TAB -->
          <div id="damage-reports" class="content-tab">
              <div class="page-header">
                  <h1>Damage Reports</h1>
              </div>
              <div class="table-container card">
                  <table>
                      <thead>
                          <tr>
                              <th>Bin ID</th>
                              <th>Location</th>
                              <th>Reported By</th>
                              <th>Description</th>
                              <th>Status</th>
                              <th>Actions</th>
                          </tr>
                      </thead>
                      <tbody id="damage-reports-table-body">
                          <% damageReports.forEach(report => { %>
                              <tr>
                                  <td><%= report.binId %></td>
                                  <td><%= report.location %></td>
                                  <td><%= report.reportedByUsername %></td>
                                  <td class="description-cell"><%= report.description %></td>
                                  <td><span class="status status-<%= report.status.toLowerCase() %>"><%= report.status %></span></td>
                                  <td class="actions">
                                      <!-- ✅ UPDATE these buttons -->
                                      <button class="btn-action update-damage-report" title="Update Status" data-report-id="<%= report._id %>">
                                          <i class="fas fa-check"></i>
                                      </button>
                                      <button class="btn-action delete-damage-report" title="Delete" data-report-id="<%= report._id %>">
                                          <i class="fas fa-trash-alt"></i>
                                      </button>
                                  </td>
                              </tr>
                          <% }) %>
                      </tbody>
                  </table>
              </div>
          </div>

          <!-- ✅ SUPPLY REQUESTS TAB -->
          <div id="supply-requests" class="content-tab">
              <div class="page-header">
                  <h1>Supply Requests</h1>
              </div>
              <div class="table-container card">
                  <table>
                      <thead>
                          <tr>
                              <th>Requested By</th>
                              <th>Supply Type</th>
                              <th>Quantity</th>
                              <th>Notes</th>
                              <th>Status</th>
                              <th>Actions</th>
                          </tr>
                      </thead>
                      <tbody id="supply-requests-table-body">
                          <% supplyRequests.forEach(request => { %>
                              <tr>
                                  <td><%= request.requestedByUsername %></td>
                                  <td><%= request.supplyType %></td>
                                  <td><%= request.quantity %></td>
                                  <td class="description-cell"><%= request.notes || 'N/A' %></td>
                                  <td><span class="status status-<%= request.status.toLowerCase() %>"><%= request.status %></span></td>
                                  <td class="actions">
                                    <button class="btn-action update-supply-request" title="Update Status" data-request-id="<%= request._id %>">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn-action delete-supply-request" title="Delete" data-request-id="<%= request._id %>">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                  </td>
                              </tr>
                          <% }) %>
                      </tbody>
                  </table>
              </div>
          </div>


        </main>
      </div>
    </div>

    <script>
    document.addEventListener("DOMContentLoaded", () => {
        // --- ELEMENT REFERENCES ---
        const wasteChartCtx = document.getElementById("wasteChart").getContext("2d");
        const statusChartCtx = document.getElementById("statusChart").getContext("2d");
        const navLinks = document.querySelectorAll(".nav-link");
        const contentTabs = document.querySelectorAll(".content-tab");
        const addUserModal = document.getElementById("addUserModal");
        const addUserBtn = document.getElementById("addUserBtn");
        const cancelAddUser = document.getElementById("cancelAddUser");
        const addUserForm = document.getElementById("addUserForm");
        const editUserModal = document.getElementById("editUserModal");
        const editUserForm = document.getElementById("editUserForm");
        const cancelEditUser = document.getElementById("cancelEditUser");
        const usersTableBody = document.getElementById("users-table-body");
        const userSearchInput = document.getElementById("userSearch");
        const binsTableBody = document.getElementById("bins-table-body");
        const alertsTableBody = document.getElementById("alerts-table-body");
        const alertBadge = document.getElementById("alert-badge");

        // --- CHART INITIALIZATION ---
        const statusChart = new Chart(statusChartCtx, {
            type: "doughnut",
            data: {
                labels: ["Empty", "Half", "Full"],
                datasets: [{
                    data: [
                        <%= locals.stats?.emptyBins || 0 %>,
                        <%= locals.stats?.halfBins || 0 %>,
                        <%= locals.stats?.fullBins || 0 %>,
                    ],
                    backgroundColor: ["#22c55e", "#f59e0b", "#ef4444"],
                }, ],
            },
        });
        new Chart(wasteChartCtx, {
            type: "line",
            data: {
                labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
                datasets: [{
                    label: "Waste (kg)",
                    data: [120, 190, 300, 250, 200, 300, 400],
                    borderColor: "#4f46e5",
                    tension: 0.4,
                    fill: true,
                    backgroundColor: "rgba(79, 70, 229, 0.1)",
                }, ],
            },
        });

        // --- GENERAL UI LISTENERS ---
        navLinks.forEach(link => {
            link.addEventListener('click', (event) => {
                event.preventDefault();
                navLinks.forEach(l => l.classList.remove('active'));
                link.classList.add('active');
                const targetId = link.getAttribute('data-target');
                const targetSection = document.getElementById(targetId);
                if (targetSection) {
                    targetSection.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
        document.getElementById("darkToggle").addEventListener("click", () => {
            document.body.classList.toggle("dark-mode");
        });

        // --- USER MANAGEMENT LOGIC ---
        addUserBtn.addEventListener("click", () => { addUserModal.style.display = "flex"; });
        cancelAddUser.addEventListener("click", () => { addUserModal.style.display = "none"; });
        cancelEditUser.addEventListener("click", () => { editUserModal.style.display = "none"; });

        addUserForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const submitBtn = addUserForm.querySelector('button[type="submit"]');
            const errorDiv = document.getElementById('modal-error-message');
            submitBtn.classList.add('loading');
            submitBtn.disabled = true;
            errorDiv.classList.add('hidden');
            const formData = new FormData(addUserForm);
            const data = Object.fromEntries(formData.entries());
            try {
                const response = await fetch('/api/users/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (response.ok) {
                    location.reload();
                } else {
                    errorDiv.textContent = result.message;
                    errorDiv.classList.remove('hidden');
                }
            } catch (error) {
                errorDiv.textContent = 'A network error occurred.';
                errorDiv.classList.remove('hidden');
            } finally {
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
            }
        });

        editUserForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const errorDiv = document.getElementById('edit-error-message');
            const formData = new FormData(editUserForm);
            const userId = formData.get('userId');
            const data = {
                username: formData.get('username'),
                email: formData.get('email'),
                role: formData.get('role')
            };
            try {
                const response = await fetch(`/api/users/${userId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                if (response.ok) {
                    const userRow = document.querySelector(`.edit-user[data-user-id="${userId}"]`).closest('tr');
                    userRow.querySelector('.user-info-cell span').textContent = data.username;
                    userRow.querySelector('td:nth-child(2)').textContent = data.email;
                    const roleTag = userRow.querySelector('.role-tag');
                    roleTag.textContent = data.role;
                    roleTag.className = `role-tag role-${data.role}`;
                    editUserModal.style.display = 'none';
                } else {
                    const result = await response.json();
                    errorDiv.textContent = result.message;
                    errorDiv.classList.remove('hidden');
                }
            } catch (error) {
                errorDiv.textContent = 'A network error occurred.';
                errorDiv.classList.remove('hidden');
            }
        });

        userSearchInput.addEventListener("input", () => {
            const searchTerm = userSearchInput.value.toLowerCase();
            const userRows = usersTableBody.querySelectorAll("tr");
            userRows.forEach((row) => {
                const username = row.querySelector(".user-info-cell span").textContent.toLowerCase();
                row.style.display = username.includes(searchTerm) ? "" : "none";
            });
        });

        usersTableBody.addEventListener("click", (e) => {
            const editButton = e.target.closest(".edit-user");
            const deleteButton = e.target.closest(".delete-user");
            if (editButton) {
                const userRow = editButton.closest("tr");
                const userId = editButton.dataset.userId;
                const username = userRow.querySelector(".user-info-cell span").textContent;
                const email = userRow.querySelector("td:nth-child(2)").textContent;
                const role = userRow.querySelector(".role-tag").textContent.trim().toLowerCase();
                editUserForm.querySelector("#editUserId").value = userId;
                editUserForm.querySelector("#editUsername").value = username;
                editUserForm.querySelector("#editEmail").value = email;
                editUserForm.querySelector("#editRole").value = role;
                editUserModal.style.display = "flex";
            }
            if (deleteButton) {
                const userId = deleteButton.dataset.userId;
                if (confirm("Are you sure you want to delete this user?")) {
                    fetch(`/api/users/${userId}`, { method: "DELETE" }).then((res) => {
                        if (res.ok) deleteButton.closest("tr").remove();
                        else alert("Failed to delete user.");
                    });
                }
            }
        });

        // --- COMBINED LIVE UPDATE FUNCTION ---
        async function updateLiveDashboard() {
            try {
                const [binsResponse, usersResponse, alertsResponse] = await Promise.all([
                    fetch("/api/bins"),
                    fetch("/api/users-count"),
                    fetch("/api/alerts/active")
                ]);
                if (!binsResponse.ok || !usersResponse.ok || !alertsResponse.ok) return;

                const bins = await binsResponse.json();
                const userData = await usersResponse.json();
                const activeAlerts = await alertsResponse.json();

                // Update Stats
                const fullBins = bins.filter((b) => b.fillLevel >= 80).length;
                const emptyBins = bins.filter((b) => b.fillLevel < 30).length;
                const halfBins = bins.filter((b) => b.fillLevel >= 30 && b.fillLevel < 80).length;
                document.getElementById("totalUsersStat").innerText = userData.count;
                document.getElementById("totalBinsStat").innerText = bins.length;
                document.getElementById("fullBinsStat").innerText = fullBins;
                document.getElementById("activeAlertsStat").innerText = fullBins;
                statusChart.data.datasets[0].data = [emptyBins, halfBins, fullBins];
                statusChart.update();

                // Update Bins Table
                bins.sort((a, b) => a.binId.localeCompare(b.binId));
                binsTableBody.innerHTML = "";
                bins.forEach((bin) => {
                    const row = document.createElement("tr");
                    let statusText, statusClass;
                    if (bin.status === "Under Maintenance") {
                        statusText = "Maintenance"; statusClass = "status-maintenance";
                        row.classList.add("maintenance-row");
                    } else if (bin.fillLevel >= 80) {
                        statusText = "High"; statusClass = "status-high";
                    } else if (bin.fillLevel >= 30) {
                        statusText = "Medium"; statusClass = "status-medium";
                    } else {
                        statusText = "Low"; statusClass = "status-low";
                    }
                    row.innerHTML = `
                        <td>${bin.binId}</td>
                        <td>${bin.location}</td>
                        <td>${bin.fillLevel}%</td>
                        <td><span class="status ${statusClass}">${statusText}</span></td>
                        <td class="actions">
                            <button class="btn-action mark-maintenance" title="Toggle Maintenance" data-bin-id="${bin._id}"><i class="fas fa-tools"></i></button>
                            <button class="btn-action delete-bin" title="Delete Bin" data-bin-id="${bin._id}"><i class="fas fa-trash-alt"></i></button>
                        </td>
                    `;
                    binsTableBody.appendChild(row);
                });

                // Update Alerts Table (with animation)
                const activeAlertIds = new Set(activeAlerts.map(alert => alert._id));
                const currentRows = alertsTableBody.querySelectorAll('tr');
                currentRows.forEach(row => {
                    const rowId = row.id.replace('alert-', '');
                    if (!activeAlertIds.has(rowId)) {
                        row.classList.add('alert-row-fade-out');
                        setTimeout(() => row.remove(), 800);
                    }
                });
                activeAlerts.forEach(alert => {
                    if (!document.getElementById(`alert-${alert._id}`)) {
                        const row = document.createElement('tr');
                        row.id = `alert-${alert._id}`;
                        row.innerHTML = `
                            <td><span class="status status-${alert.type.toLowerCase()}">${alert.type}</span></td>
                            <td>${alert.message}</td>
                            <td>${alert.bin ? alert.bin.binId : 'N/A'}</td>
                            <td>${alert.status}</td>
                            <td>${new Date(alert.createdAt).toLocaleString()}</td>
                            <td class="actions">
                                <button class="btn-action resolve-alert" title="Mark as Resolved" data-alert-id="${alert._id}"><i class="fas fa-check"></i></button>
                                <button class="btn-action delete-alert" title="Delete" data-alert-id="${alert._id}"><i class="fas fa-trash-alt"></i></button>
                            </td>
                        `;
                        alertsTableBody.prepend(row);
                    }
                });

                // Update Alert Badge
                if (activeAlerts.length > 0) {
                    alertBadge.textContent = activeAlerts.length;
                    alertBadge.style.display = 'flex';
                } else {
                    alertBadge.style.display = 'none';
                }

                } catch (error) {
                    console.error("Failed to update live dashboard:", error);
                  }
                }
        setInterval(updateLiveDashboard, 3000);
        updateLiveDashboard();


        // --- REPORTS & REQUESTS ACTIONS LISTENERS ---
        const damageReportsTableBody = document.getElementById("damage-reports-table-body");
        const supplyRequestsTableBody = document.getElementById("supply-requests-table-body");

        
        // REPLACEING old Damage Reports listener with this new o
        damageReportsTableBody.addEventListener('click', async (e) => {
            const updateButton = e.target.closest('.update-damage-report');
            const deleteButton = e.target.closest('.delete-damage-report');
            
            if (updateButton) {
                const reportId = updateButton.dataset.reportId;
                const row = updateButton.closest('tr');
                const statusCell = row.querySelector('.status');

                // Agar report pehle se resolved hai, toh kuch na karein
                if (statusCell.textContent === 'Resolved') {
                    return; 
                }

                const response = await fetch(`/api/reports/damage/${reportId}/update`, { method: 'POST' });
                const result = await response.json();

                if (response.ok) {
                    // Update the status text and color on the page
                    statusCell.textContent = result.report.status;
                    statusCell.className = `status status-${result.report.status.toLowerCase().replace(' ', '-')}`;
                    
                    // Agar report resolve ho gaya hai, toh button ko disable/gray out kar dein
                    if (result.report.status === 'Resolved') {
                        updateButton.style.opacity = '0.5';
                        updateButton.style.cursor = 'not-allowed';
                    }
                }
            }

            if (deleteButton) {
                const reportId = deleteButton.dataset.reportId;
                if (confirm('Are you sure you want to delete this report?')) {
                    const response = await fetch(`/api/reports/damage/${reportId}`, { method: 'DELETE' });
                    if (response.ok) {
                        deleteButton.closest('tr').remove();
                    } else {
                        alert('Failed to delete report.');
                    }
                }
            }
        });

        // Supply Requests Actions
        supplyRequestsTableBody.addEventListener('click', async (e) => {
            const updateButton = e.target.closest('.update-supply-request');
            const deleteButton = e.target.closest('.delete-supply-request');

            if (updateButton) {
                const requestId = updateButton.dataset.requestId;
                const response = await fetch(`/api/requests/supply/${requestId}/update`, { method: 'POST' });
                const result = await response.json();
                if (response.ok) {
                    const statusCell = updateButton.closest('tr').querySelector('.status');
                    statusCell.textContent = result.request.status;
                    statusCell.className = `status status-${result.request.status.toLowerCase()}`;
                }
            }
            if (deleteButton) {
                const requestId = deleteButton.dataset.requestId;
                if (confirm('Are you sure you want to delete this request?')) {
                    const response = await fetch(`/api/requests/supply/${requestId}`, { method: 'DELETE' });
                    if (response.ok) {
                        deleteButton.closest('tr').remove();
                    }
                }
            }
        });


        // --- TABLE ACTIONS LISTENERS ---
        binsTableBody.addEventListener("click", async (e) => {
            const maintenanceButton = e.target.closest(".mark-maintenance");
            const deleteButton = e.target.closest(".delete-bin");
            if (maintenanceButton) {
                await fetch(`/api/bins/${maintenanceButton.dataset.binId}/maintenance`, { method: "POST" });
            }
            if (deleteButton) {
                if (confirm("Are you sure?")) {
                    await fetch(`/api/bins/${deleteButton.dataset.binId}`, { method: "DELETE" });
                }
            }
        });

        alertsTableBody.addEventListener("click", async (e) => {
            const resolveButton = e.target.closest(".resolve-alert");
            const deleteButton = e.target.closest(".delete-alert");
            if (resolveButton) {
                await fetch(`/api/alerts/${resolveButton.dataset.alertId}/resolve`, { method: "POST" });
            }
            if (deleteButton) {
                if (confirm("Are you sure?")) {
                    await fetch(`/api/alerts/${deleteButton.dataset.alertId}`, { method: "DELETE" });
                }
            }
        });
      });
    </script>

  </body>
</html>
